'use strict';

var options = {
  renderer: new marked.Renderer()
};

var lexer = new marked.Lexer(options);
var renderer = new marked.Renderer();

var repeat = function repeat(char, count) {
  return Array(count + 1).join(char);
};
var html2text = function html2text(html) {
  return html.replace(/<[^>]*>/g, '');
};

renderer.code = function (text) {
  return '\n``` ' + text + ' ``` \n';
};
renderer.blockquote = function (text) {
  return '\n> ' + text + '\n';
};
renderer.html = function (text) {
  return text;
};
renderer.heading = function (text, level, raw) {
  return '\n' + repeat('=', level) + ' ' + raw + ' ' + repeat('=', level) + ' \n';
};
renderer.hr = function () {
  return '\n';
};
renderer.list = function (text, ordered) {
  if (ordered) {
    return _.map(text.split('\n'), function (s) {
      return s.length ? '# ' + html2text(s) : '';
    }).join('\n');
  } else {
    return _.map(text.split('\n'), function (s) {
      return s.length ? '- ' + html2text(s) : '';
    }).join('\n');
  }
};
renderer.paragraph = function (text) {
  return html2text(text);
};
renderer.strong = function (text) {
  return '**' + text + '**';
};
renderer.em = function (text) {
  return '//' + text + '//';
};
renderer.codespan = function (text) {
  return '`' + text + '`';
};
renderer.br = function () {
  return '\n';
};
renderer.del = function (text) {
  return '~~' + text + '~~';
};
renderer.link = function (href, titile, text) {
  return '[[' + href + ' | ' + text + ']]\n';
};
renderer.image = function (href, titile, text) {
  return '\n{img ' + href + '}\n';
};
renderer.text = function (text) {
  return text;
};

function m2r(text) {
  var tokens = lexer.lex(text);
  return marked(text, {
    renderer: renderer
  });
}
